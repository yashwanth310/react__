{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// User Data Type\n\n// Authentication User Type\n\n// Initial State Type\n\n// Load Data from Local Storage\nconst storedUsers = JSON.parse(localStorage.getItem(\"users\") || \"[]\");\nconst storedUserData = JSON.parse(localStorage.getItem(\"userData\") || \"null\");\nconst initialState = {\n  userData: storedUserData,\n  registeredUsers: storedUsers,\n  user: null\n};\n\n// Create Slice\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    registerUser: (state, action) => {\n      state.registeredUsers.push(action.payload);\n      localStorage.setItem(\"users\", JSON.stringify(state.registeredUsers));\n    },\n    loginUser: (state, action) => {\n      const foundUser = state.registeredUsers.find(u => u.email === action.payload.email && u.password === action.payload.password);\n      if (foundUser) {\n        state.user = foundUser;\n      } else {\n        alert(\"Invalid email or password\");\n      }\n    },\n    logoutUser: state => {\n      state.user = null;\n    },\n    saveUserData: (state, action) => {\n      state.userData = action.payload;\n      localStorage.setItem(\"userData\", JSON.stringify(action.payload));\n    }\n  }\n});\n\n// Export Actions & Reducer\nexport const {\n  registerUser,\n  loginUser,\n  logoutUser,\n  saveUserData\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","storedUsers","JSON","parse","localStorage","getItem","storedUserData","initialState","userData","registeredUsers","user","userSlice","name","reducers","registerUser","state","action","push","payload","setItem","stringify","loginUser","foundUser","find","u","email","password","alert","logoutUser","saveUserData","actions","reducer"],"sources":["C:/Users/koush/Documents/YASHU/react-assignment/src/redux/userSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n// User Data Type\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  address: string;\r\n  phone: string;\r\n}\r\n\r\n// Authentication User Type\r\ninterface AuthUser {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n// Initial State Type\r\ninterface UserState {\r\n  userData: User | null;  // ✅ Stores user form data\r\n  registeredUsers: AuthUser[];  // ✅ Stores registered users\r\n  user: AuthUser | null;  // ✅ Stores logged-in user\r\n}\r\n\r\n// Load Data from Local Storage\r\nconst storedUsers = JSON.parse(localStorage.getItem(\"users\") || \"[]\");\r\nconst storedUserData = JSON.parse(localStorage.getItem(\"userData\") || \"null\");\r\n\r\nconst initialState: UserState = {\r\n  userData: storedUserData,\r\n  registeredUsers: storedUsers,\r\n  user: null,\r\n};\r\n\r\n// Create Slice\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState,\r\n  reducers: {\r\n    registerUser: (state, action: PayloadAction<AuthUser>) => {\r\n      state.registeredUsers.push(action.payload);\r\n      localStorage.setItem(\"users\", JSON.stringify(state.registeredUsers));\r\n    },\r\n    loginUser: (state, action: PayloadAction<AuthUser>) => {\r\n      const foundUser = state.registeredUsers.find(\r\n        (u) => u.email === action.payload.email && u.password === action.payload.password\r\n      );\r\n\r\n      if (foundUser) {\r\n        state.user = foundUser;\r\n      } else {\r\n        alert(\"Invalid email or password\");\r\n      }\r\n    },\r\n    logoutUser: (state) => {\r\n      state.user = null;\r\n    },\r\n    saveUserData: (state, action: PayloadAction<User>) => {\r\n      state.userData = action.payload;\r\n      localStorage.setItem(\"userData\", JSON.stringify(action.payload));\r\n    },\r\n  },\r\n});\r\n\r\n// Export Actions & Reducer\r\nexport const { registerUser, loginUser, logoutUser, saveUserData } = userSlice.actions;\r\nexport default userSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;;AAE7D;;AASA;;AAMA;;AAOA;AACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;AACrE,MAAMC,cAAc,GAAGJ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,MAAM,CAAC;AAE7E,MAAME,YAAuB,GAAG;EAC9BC,QAAQ,EAAEF,cAAc;EACxBG,eAAe,EAAER,WAAW;EAC5BS,IAAI,EAAE;AACR,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGX,WAAW,CAAC;EAC5BY,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAA+B,KAAK;MACxDD,KAAK,CAACN,eAAe,CAACQ,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAC1Cd,YAAY,CAACe,OAAO,CAAC,OAAO,EAAEjB,IAAI,CAACkB,SAAS,CAACL,KAAK,CAACN,eAAe,CAAC,CAAC;IACtE,CAAC;IACDY,SAAS,EAAEA,CAACN,KAAK,EAAEC,MAA+B,KAAK;MACrD,MAAMM,SAAS,GAAGP,KAAK,CAACN,eAAe,CAACc,IAAI,CACzCC,CAAC,IAAKA,CAAC,CAACC,KAAK,KAAKT,MAAM,CAACE,OAAO,CAACO,KAAK,IAAID,CAAC,CAACE,QAAQ,KAAKV,MAAM,CAACE,OAAO,CAACQ,QAC3E,CAAC;MAED,IAAIJ,SAAS,EAAE;QACbP,KAAK,CAACL,IAAI,GAAGY,SAAS;MACxB,CAAC,MAAM;QACLK,KAAK,CAAC,2BAA2B,CAAC;MACpC;IACF,CAAC;IACDC,UAAU,EAAGb,KAAK,IAAK;MACrBA,KAAK,CAACL,IAAI,GAAG,IAAI;IACnB,CAAC;IACDmB,YAAY,EAAEA,CAACd,KAAK,EAAEC,MAA2B,KAAK;MACpDD,KAAK,CAACP,QAAQ,GAAGQ,MAAM,CAACE,OAAO;MAC/Bd,YAAY,CAACe,OAAO,CAAC,UAAU,EAAEjB,IAAI,CAACkB,SAAS,CAACJ,MAAM,CAACE,OAAO,CAAC,CAAC;IAClE;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEJ,YAAY;EAAEO,SAAS;EAAEO,UAAU;EAAEC;AAAa,CAAC,GAAGlB,SAAS,CAACmB,OAAO;AACtF,eAAenB,SAAS,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}